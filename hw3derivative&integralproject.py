# -*- coding: utf-8 -*-
"""HW3Derivative&IntegralProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13-N0tcG_AKlEKgTsAomYt9cT7Tb3RdYw
"""

import numpy as np


#4 Trapezoid Rule For Integration
a = 0
b = np.pi
N = 10
def f(x):
  return np.sin(x)

def trapezoid(N):
  h = ((b - a) / N)
  array = np.array([f(a+i*h) for i in range(1, N-1)])
  I = (h/2)*(f(a)+f(b)) + h*np.sum(array)
  return(I)
  
trapezoid(100000)

#1 numerical derivative using the forward difference method
import numpy as np
x = np.pi
def deriv_sin(x, h):
  
  return(np.sin(x + h) - np.sin(x)) / h

deriv_sin(np.pi/4, .1)

#2
#numerical derivative using the central difference method 
#(compare it with forward difference method for the same value of h, and also demonstrate that you get better results with decreasing h)
import numpy as np
x = np.pi
def central_deriv_sin(x, h):
    return ((np.sin(x+h) - np.sin(x-h))/(2*h))

central_deriv_sin(np.pi/4, .1 )

#3
#finite difference for second derivative

import numpy as np
x = np.pi
def finite_diff_2nd_Deriv_sin(x, h):
  return((np.sin(x+h/2) + np.sin(x-h/2)-2*np.sin(x))/h)

finite_diff_2nd_Deriv_sin(np.pi, .1)